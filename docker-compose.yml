services:
  # PostgreSQL with logical replication enabled
  postgres:
    image: ghcr.io/kruxia/postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydb
    command: >
      postgres
      -c wal_level=logical
      -c max_replication_slots=4
      -c max_wal_senders=4
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Kafka (KRaft mode - no Zookeeper required)
  kafka:
    image: ghcr.io/kruxia/kafka:4.0.0
    environment:
      CLUSTER_ID: '5L6g3nShT-eMCtK--X86sw'
      KAFKA_NODE_ID: 0
      KAFKA_PROCESS_ROLES: 'controller,broker'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '0@kafka:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5

  # pg-capture for local development
  pg-capture:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    volumes:
      - checkpoint_data:/var/lib/pg-capture
    environment:
      # PostgreSQL configuration
      PG_HOST: postgres
      PG_PORT: 5432
      PG_DATABASE: mydb
      PG_USERNAME: postgres
      PG_PASSWORD: postgres
      PG_PUBLICATION: my_publication
      PG_SLOT_NAME: pg_capture_slot
      
      # Kafka configuration
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC_PREFIX: cdc
      KAFKA_COMPRESSION: snappy
      KAFKA_ACKS: all
      
      # Replication configuration
      REPLICATION_POLL_INTERVAL_MS: 100
      REPLICATION_KEEPALIVE_INTERVAL_SECS: 10
      REPLICATION_CHECKPOINT_INTERVAL_SECS: 10
      REPLICATION_CHECKPOINT_FILE: /var/lib/pg-capture/checkpoint.json
      
      # Logging
      RUST_LOG: pg_capture=info
    restart: unless-stopped
    profiles:
      - app

  # Kafka UI for monitoring
  kafka-ui:
    image: ghcr.io/kruxia/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      DYNAMIC_CONFIG_ENABLED: "true"

  # Development tools
  pgadmin:
    image: ghcr.io/kruxia/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    depends_on:
      - postgres
    profiles:
      - tools

volumes:
  postgres_data:
  kafka_data:
  checkpoint_data: